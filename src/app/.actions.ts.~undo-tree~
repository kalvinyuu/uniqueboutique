(undo-tree-save-format-version . 1)
"8f3121cb0f9d0e5deb6e57af9ad47ba10e973fce"
[nil nil nil nil (26454 34550 100646 0) 0 (:visualizer [1 1 3 #<marker at 39 in  *undo-tree*>])]
([nil nil ((#("s" 0 1 (font-lock-multiline t fontified t)) . -2396) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2397) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2398) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2399) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2400) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2401) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 2402 (t 26453 14836 55339 506000)) nil (26454 34550 100644 0) 0 (:visualizer [1 1 3 #<marker at 156 in  *undo-tree*>])])
([nil nil ((2396 . 2398)) nil (26454 34550 100624 0) 0 (:visualizer [1 1 3 #<marker at 273 in  *undo-tree*>])])
([nil nil ((#("i" 0 1 (font-lock-multiline t fontified t)) . -2396) (undo-tree-id0 . -1) (#("n" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2397) (undo-tree-id1 . -1) 2398) nil (26454 34550 100622 0) 0 (:visualizer [1 1 3 #<marker at 390 in  *undo-tree*>])])
([nil nil ((2396 . 2402)) nil (26454 34550 100606 0) 0 (:visualizer [1 1 3 #<marker at 507 in  *undo-tree*>])])
([nil nil ((#("n" 0 1 (font-lock-multiline t fontified t)) . -2396) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("u" 0 1 (font-lock-multiline t fontified t)) . -2397) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("m" 0 1 (font-lock-multiline t fontified t)) . -2398) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("b" 0 1 (font-lock-multiline t fontified t)) . -2399) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2400) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("r" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2401) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 2402 (t 26454 34550 102960 478000)) nil (26454 34843 765893 0) 0 (:visualizer [1 1 3 #<marker at 624 in  *undo-tree*>])])
([nil nil ((2396 . 2402)) nil (26454 34843 765845 0) 0 (:visualizer [1 1 3 #<marker at 741 in  *undo-tree*>])])
([nil nil ((#("o" 0 1 (font-lock-multiline t fontified t)) . -2399) (undo-tree-id25 . -1) (#("w" 0 1 (font-lock-multiline t fontified t)) . -2400) (undo-tree-id26 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2401) (undo-tree-id27 . -1) 2402) nil (26454 34843 765843 0) 0 (:visualizer [1 1 3 #<marker at 858 in  *undo-tree*>])])
([nil nil ((2399 . 2403)) nil (26454 34843 765824 0) 0 (:visualizer [1 1 3 #<marker at 975 in  *undo-tree*>])])
([nil nil ((#("u" 0 1 (font-lock-multiline t fontified t)) . -2396) (undo-tree-id89 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2397) (undo-tree-id90 . -1) (#("k" 0 1 (font-lock-multiline t fontified t)) . -2398) (undo-tree-id91 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2399) (undo-tree-id92 . -1) (#("o" 0 1 (font-lock-multiline t fontified t)) . -2400) (undo-tree-id93 . -1) (#("w" 0 1 (font-lock-multiline t fontified t)) . -2401) (undo-tree-id94 . -1) (#("n" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2402) (undo-tree-id95 . -1) 2403 (t 26454 34843 769040 595000)) nil (26454 34874 921776 0) 0 (:visualizer [1 1 3 #<marker at 1092 in  *undo-tree*>])])
([nil nil ((2396 . 2402)) nil (26454 34874 921752 0) 0 (:visualizer [1 1 3 #<marker at 1209 in  *undo-tree*>])])
([nil nil ((1976 . 1977) (t 26454 34874 923964 524000)) nil (26455 28367 667323 0) 0 (:visualizer [1 1 3 #<marker at 1326 in  *undo-tree*>])])
([nil nil ((#(": Promise<void>" 0 2 (fontified t) 2 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 14 (face typescript-primitive-face fontified t) 14 15 (fontified t)) . 1977) (undo-tree-id20 . -15) (undo-tree-id21 . -14) (undo-tree-id22 . -15) (undo-tree-id23 . -15) (undo-tree-id24 . -15) (undo-tree-id25 . -15) (undo-tree-id26 . -15) (undo-tree-id27 . -15) (undo-tree-id28 . -15) (undo-tree-id29 . -15) (undo-tree-id30 . -15) (undo-tree-id31 . -15) (undo-tree-id32 . -15)) nil (26455 28367 667321 0) 0 (:visualizer [1 1 3 #<marker at 1443 in  *undo-tree*>])])
([nil nil ((#("\\" 0 1 (fontified t)) . -1976) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 1977) nil (26455 28367 667310 0) 0 (:visualizer [1 1 3 #<marker at 1560 in  *undo-tree*>])])
([nil nil ((#("n" 0 1 (font-lock-multiline t fontified t)) . -2381) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("u" 0 1 (font-lock-multiline t fontified t)) . -2382) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("m" 0 1 (font-lock-multiline t fontified t)) . -2383) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("b" 0 1 (font-lock-multiline t fontified t)) . -2384) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2385) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("r" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2386) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 2387 (t 26455 28367 670621 66000)) nil (26455 28712 328293 0) 0 (:visualizer [1 1 3 #<marker at 1677 in  *undo-tree*>])])
([nil nil ((2381 . 2387)) nil (26455 28712 328250 0) 0 (:visualizer [1 1 3 #<marker at 1794 in  *undo-tree*>])])
([nil nil ((#(" " 0 1 (font-lock-multiline t fontified t)) . -2279) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2280) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2281) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2282) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2283) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2284) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2285) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2286) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2287) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2288) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("," 0 1 (font-lock-multiline t fontified t)) . -2289) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 2290 (t 26455 28712 330751 257000)) nil (26455 28852 304021 0) 0 (:visualizer [1 1 3 #<marker at 1911 in  *undo-tree*>])])
([nil nil ((#("a" 0 1 (font-lock-multiline t fontified t)) . -2326) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2327) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2328) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2329) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2330) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2331) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2332) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2333) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2334) (undo-tree-id243 . -1) (undo-tree-id244 . -1) 2335) nil (26455 28852 304006 0) 0 (:visualizer [1 1 3 #<marker at 2028 in  *undo-tree*>])])
([nil nil ((#(" " 0 1 (font-lock-multiline t fontified t)) . -2357) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2358) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2359) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2360) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2361) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("u" 0 1 (font-lock-multiline t fontified t)) . -2362) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("m" 0 1 (font-lock-multiline t fontified t)) . -2363) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("b" 0 1 (font-lock-multiline t fontified t)) . -2364) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2365) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("r" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2366) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 2367) nil (26455 28852 303994 0) 0 (:visualizer [1 1 3 #<marker at 2145 in  *undo-tree*>])])
([nil nil ((#("a" 0 1 (font-lock-multiline t fontified t)) . -2395) (undo-tree-id194 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2396) (undo-tree-id195 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2397) (undo-tree-id196 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2398) (undo-tree-id197 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2399) (undo-tree-id198 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2400) (undo-tree-id199 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2401) (undo-tree-id200 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2402) (undo-tree-id201 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2403) (undo-tree-id202 . -1) 2404) nil (26455 28852 303976 0) 0 (:visualizer [1 1 3 #<marker at 2262 in  *undo-tree*>])])
([nil nil ((#(" " 0 1 (font-lock-multiline t fontified t)) . -2475) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2476) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2477) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2478) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2479) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2480) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2481) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2482) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2483) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2484) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 2485) nil (26455 28852 303969 0) 0 (:visualizer [1 1 3 #<marker at 2379 in  *undo-tree*>])])
([nil nil ((#(" " 0 1 (font-lock-multiline t fontified t)) . -2689) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2690) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2691) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2692) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2693) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2694) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2695) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2696) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2697) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2698) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 2699) nil (26455 28852 303941 0) 0 (:visualizer [1 1 3 #<marker at 2496 in  *undo-tree*>])])
([nil nil ((2279 . 2280) (t 26455 28852 308371 522000)) nil (26455 28871 419603 0) 0 (:visualizer [1 1 3 #<marker at 2613 in  *undo-tree*>])])
([nil nil ((1976 . 1979) (t 26455 28871 421884 240000)) nil (26455 29344 338775 0) 0 (:visualizer [1 1 3 #<marker at 2730 in  *undo-tree*>])])
([nil nil ((#("p" 0 1 (fontified t)) . -1978) (undo-tree-id267 . -1) 1979) nil (26455 29344 338774 0) 0 (:visualizer [1 1 3 #<marker at 2847 in  *undo-tree*>])])
([nil nil ((1978 . 1991)) nil (26455 29344 338764 0) 0 (:visualizer [1 1 3 #<marker at 2964 in  *undo-tree*>])])
([nil nil ((#("price: formData.get('price')," 0 16 (font-lock-multiline t fontified t) 16 19 (font-lock-multiline t face font-lock-function-name-face fontified t) 19 20 (font-lock-multiline t fontified t) 20 27 (font-lock-multiline t face font-lock-string-face fontified t) 27 29 (font-lock-multiline t fontified t)) . 2070) (undo-tree-id268 . -1) (undo-tree-id269 . -29) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -29) (undo-tree-id275 . -29) (undo-tree-id276 . -29) (undo-tree-id277 . -29) (t 26455 29344 341531 986000)) nil (26455 29592 623426 0) 0 (:visualizer [1 1 3 #<marker at 3081 in  *undo-tree*>])])
([nil nil ((nil rear-nonsticky nil 2120 . 2121) (nil fontified nil 2070 . 2121) (2070 . 2121)) nil (26455 29592 623408 0) 0 (:visualizer [1 1 3 #<marker at 3198 in  *undo-tree*>])])
([nil nil ((#(" unit_amount: Number(info.price.toString().replace(/\\./g, \"\"))" 0 14 (font-lock-multiline t fontified t) 14 20 (font-lock-multiline t face font-lock-type-face fontified t) 20 32 (font-lock-multiline t fontified t) 32 40 (face font-lock-function-name-face font-lock-multiline t fontified t) 40 43 (font-lock-multiline t fontified t) 43 50 (face font-lock-function-name-face font-lock-multiline t fontified t) 50 51 (font-lock-multiline t fontified t) 51 52 (font-lock-multiline t face font-lock-string-face syntax-table (7 . 47) fontified t) 52 54 (font-lock-multiline t face font-lock-string-face fontified t) 54 55 (font-lock-multiline t face font-lock-string-face syntax-table (7 . 47) fontified t) 55 58 (font-lock-multiline t fontified t) 58 60 (font-lock-multiline t face font-lock-string-face fontified t) 60 62 (font-lock-multiline t fontified t)) . -2604) (undo-tree-id278 . -62) (undo-tree-id279 . -58) (undo-tree-id280 . -58) (undo-tree-id281 . -62) (undo-tree-id282 . -62) 2666 (t 26455 29592 627399 583000)) nil (26455 29654 214540 0) 0 (:visualizer [1 1 3 #<marker at 3315 in  *undo-tree*>])])
([nil nil ((nil rear-nonsticky nil 2644 . 2645) (nil fontified nil 2604 . 2645) (2604 . 2645)) nil (26455 30898 377265 0) 0 (:visualizer [1 1 3 #<marker at 3432 in  *undo-tree*>])])
([nil nil ((#(":" 0 1 (fontified t)) . -1976) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#(" " 0 1 (fontified t)) . -1977) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("P" 0 1 (fontified t)) . -1978) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1979) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1980) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1981) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1982) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1983) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1984) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (#("<" 0 1 (fontified t)) . -1985) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -1986) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1987) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1988) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (#("d" 0 1 (face typescript-primitive-face fontified t)) . -1989) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#(">" 0 1 (fontified t)) . -1990) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) 1991 (t 26455 30880 8034 297000)) nil (26455 30937 668747 0) 0 (:visualizer [0 1 0 #<marker at 3559 in  *undo-tree*>])] [nil nil ((#("p" 0 1 (font-lock-multiline t fontified t)) . -2077) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2078) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2079) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2080) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2081) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("F" 0 1 (font-lock-multiline t fontified t)) . -2082) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("l" 0 1 (font-lock-multiline t fontified t)) . -2083) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("o" 0 1 (font-lock-multiline t fontified t)) . -2084) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2085) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2086) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (#("(" 0 1 (font-lock-multiline t fontified t)) . -2087) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) 2088 (t 26455 30880 8034 297000)) ((2077 . 2088)) (26455 30897 924320 0) 0 (:visualizer [0 1 0 #<marker at 3563 in  *undo-tree*>])] [nil nil ((2018 . 2021) (t 26455 29654 217871 141000)) ((#("sag" 0 2 (face font-lock-function-name-face fontified t) 2 3 (face font-lock-function-name-face fontified t)) . 2018) (undo-tree-id630 . -2) (undo-tree-id631 . -3) (undo-tree-id632 . -3)) (26455 30875 999994 0) 0 (:visualizer [1 1 1 #<marker at 3571 in  *undo-tree*>])])
([nil nil ((2589 . 2590) (t 26455 30937 673135 503000)) nil (26455 31993 570419 0) 0 (:visualizer [0 1 0 #<marker at 3700 in  *undo-tree*>])])
nil
([nil nil ((#("g" 0 1 (face font-lock-function-name-face font-lock-multiline t fontified t)) . -2020) (undo-tree-id292 . -1) 2021) ((2020 . 2021)) (26455 30875 673040 0) 0 (:visualizer [1 1 1 #<marker at 3712 in  *undo-tree*>])])
([nil nil ((#(" " 0 1 (font-lock-multiline t fontified t)) . -2094) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2095) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("s" 0 1 (font-lock-multiline t face font-lock-keyword-face fontified t)) . -2096) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -2097) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2098) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2099) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2100) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (#("i" 0 1 (font-lock-multiline t fontified t)) . -2101) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (#("n" 0 1 (font-lock-multiline t fontified t)) . -2102) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("g" 0 1 (font-lock-multiline t face typescript-primitive-face fontified t)) . -2103) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#(")" 0 1 (font-lock-multiline t fontified t)) . -2104) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) 2105 (t 26455 31993 574091 537000)) nil (26455 32009 390489 0) 0 (:visualizer [0 1 0 #<marker at 3841 in  *undo-tree*>])])
([nil nil ((2020 . 2022)) ((#("fe" 0 2 (face font-lock-function-name-face fontified t)) . 2020) (undo-tree-id629 . -2)) (26455 30875 368629 0) 0 (:visualizer [1 1 1 #<marker at 3853 in  *undo-tree*>])])
([nil nil ((#("p" 0 1 (font-lock-multiline t fontified t)) . -2062) (undo-tree-id840 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2063) (undo-tree-id841 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2064) (undo-tree-id842 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2065) (undo-tree-id843 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2066) (undo-tree-id844 . -1) (#("F" 0 1 (font-lock-multiline t fontified t)) . -2067) (undo-tree-id845 . -1) (#("l" 0 1 (font-lock-multiline t fontified t)) . -2068) (undo-tree-id846 . -1) (#("o" 0 1 (font-lock-multiline t fontified t)) . -2069) (undo-tree-id847 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2070) (undo-tree-id848 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2071) (undo-tree-id849 . -1) (#("(" 0 1 (font-lock-multiline t fontified t)) . -2072) (undo-tree-id850 . -1) 2073) nil (26455 32009 390435 0) 0 (:visualizer [0 1 0 #<marker at 3982 in  *undo-tree*>])])
([nil nil ((#("p" 0 1 (face font-lock-function-name-face font-lock-multiline t fontified t)) . -2022) (undo-tree-id291 . -1) 2023) ((2022 . 2023)) (26455 30875 90713 0) 0 (:visualizer [1 1 1 #<marker at 3994 in  *undo-tree*>])])
([nil nil ((2062 . 2064)) nil (26455 34577 426991 0) 0 (:visualizer [0 1 0 #<marker at 4123 in  *undo-tree*>])])
([nil nil ((2022 . 2025)) ((#("PXS" 0 1 (face font-lock-function-name-face fontified t) 1 2 (face font-lock-function-name-face fontified t) 2 3 (face font-lock-function-name-face fontified t)) . 2022) (undo-tree-id626 . -1) (undo-tree-id627 . -3) (undo-tree-id628 . -3)) (26455 30874 763688 0) 0 (:visualizer [1 1 1 #<marker at 4135 in  *undo-tree*>])])
([nil nil ((#(")" 0 1 (font-lock-multiline t fontified t)) . 2063) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1)) ((2063 . 2064)) (26455 34577 999890 0) 0 (:visualizer [0 1 0 #<marker at 4264 in  *undo-tree*>])])
([nil nil ((#("X" 0 1 (face font-lock-function-name-face font-lock-multiline t fontified t)) . -2023) (undo-tree-id285 . -1) (undo-tree-id287 . -1) (#("S" 0 1 (face font-lock-function-name-face font-lock-multiline t fontified t)) . -2024) (undo-tree-id289 . -1) 2025) ((2023 . 2025)) (26455 30874 361287 0) 0 (:visualizer [1 1 1 #<marker at 4276 in  *undo-tree*>])])
([nil current ((#("(" 0 1 (font-lock-multiline t fontified t)) . 2062) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1)) ((2062 . 2063)) (26455 34578 296086 0) 0 (:visualizer [0 1 0 #<marker at 4405 in  *undo-tree*>])])
([nil nil ((2023 . 2025)) ((#("XS" 0 1 (face font-lock-function-name-face fontified t) 1 2 (face font-lock-function-name-face fontified t)) . 2023)) (26455 30873 195147 0) 0 (:visualizer [1 1 1 #<marker at 4417 in  *undo-tree*>])])
([nil nil ((#("        name: formData.get('name'),
        price: formData.get(\"price\"),
        imageLocation: formData.get('imageLocation'),
        category: formData.get('category')," 0 23 (font-lock-multiline t fontified t) 23 26 (font-lock-multiline t face font-lock-function-name-face fontified t) 26 27 (font-lock-multiline t fontified t) 27 33 (font-lock-multiline t face font-lock-string-face fontified t) 33 44 (font-lock-multiline t fontified t) 44 51 (font-lock-multiline t fontified t) 51 60 (font-lock-multiline t fontified t) 60 63 (font-lock-multiline t face font-lock-function-name-face fontified t) 63 64 (font-lock-multiline t fontified t) 64 71 (font-lock-multiline t face font-lock-string-face fontified t) 71 72 (font-lock-multiline t fontified t) 72 73 (font-lock-multiline t fontified t rear-nonsticky t) 73 74 (font-lock-multiline t fontified t) 74 106 (font-lock-multiline t fontified t) 106 109 (font-lock-multiline t face font-lock-function-name-face fontified t) 109 110 (font-lock-multiline t fontified t) 110 125 (font-lock-multiline t face font-lock-string-face fontified t) 125 155 (font-lock-multiline t fontified t) 155 158 (font-lock-multiline t face font-lock-function-name-face fontified t) 158 159 (font-lock-multiline t fontified t) 159 169 (font-lock-multiline t face font-lock-string-face fontified t) 169 171 (font-lock-multiline t fontified t)) . 2011) (undo-tree-id987 . -51) (undo-tree-id988 . -171) (undo-tree-id989 . -51) (undo-tree-id990 . -51)) ((2011 . 2182)) (26455 34573 939349 0) 0 (:visualizer [0 1 0 #<marker at 4546 in  *undo-tree*>])])
([nil nil ((#("XS" 0 1 (face font-lock-function-name-face font-lock-multiline t fontified t) 1 2 (face font-lock-function-name-face font-lock-multiline t fontified t)) . 2023) (undo-tree-id408 . -2) (undo-tree-id409 . -2)) ((2023 . 2025)) (26455 30872 426076 0) 0 (:visualizer [1 1 1 #<marker at 4558 in  *undo-tree*>])])
([nil nil ((nil rear-nonsticky nil 2267 . 2268) (2011 . 2268)) ((#("        const name = formData.get(\"name\")?.toString();
        const price = parseFloat(formData.get(\"price\") as string);
        const imageLocation = formData.get(\"imageLocation\")?.toString();
        const category = formData.get(\"category\")?.toString();" 0 8 (font-lock-multiline t fontified nil) 8 13 (font-lock-multiline t face font-lock-keyword-face fontified nil) 13 14 (font-lock-multiline t fontified nil) 14 18 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 18 30 (font-lock-multiline t fontified nil) 30 33 (font-lock-multiline t face font-lock-function-name-face fontified nil) 33 34 (font-lock-multiline t fontified nil) 34 40 (font-lock-multiline t face font-lock-string-face fontified nil) 40 43 (font-lock-multiline t fontified nil) 43 51 (face font-lock-function-name-face font-lock-multiline t fontified nil) 51 63 (font-lock-multiline t fontified nil) 63 68 (font-lock-multiline t face font-lock-keyword-face fontified nil) 68 69 (font-lock-multiline t fontified nil) 69 74 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 74 77 (font-lock-multiline t fontified nil) 77 87 (face font-lock-function-name-face font-lock-multiline t fontified nil) 87 97 (font-lock-multiline t fontified nil) 97 100 (font-lock-multiline t face font-lock-function-name-face fontified nil) 100 101 (font-lock-multiline t fontified nil) 101 108 (font-lock-multiline t face font-lock-string-face fontified nil) 108 110 (font-lock-multiline t fontified nil) 110 112 (font-lock-multiline t face font-lock-keyword-face fontified nil) 112 113 (font-lock-multiline t fontified nil) 113 119 (font-lock-multiline t face typescript-primitive-face fontified nil) 119 130 (font-lock-multiline t fontified nil) 130 135 (font-lock-multiline t face font-lock-keyword-face fontified nil) 135 136 (font-lock-multiline t fontified nil) 136 149 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 149 161 (font-lock-multiline t fontified nil) 161 164 (font-lock-multiline t face font-lock-function-name-face fontified nil) 164 165 (font-lock-multiline t fontified nil) 165 180 (font-lock-multiline t face font-lock-string-face fontified nil) 180 183 (font-lock-multiline t fontified nil) 183 191 (face font-lock-function-name-face font-lock-multiline t fontified nil) 191 203 (font-lock-multiline t fontified nil) 203 208 (font-lock-multiline t face font-lock-keyword-face fontified nil) 208 209 (font-lock-multiline t fontified nil) 209 217 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 217 229 (font-lock-multiline t fontified nil) 229 232 (font-lock-multiline t face font-lock-function-name-face fontified nil) 232 233 (font-lock-multiline t fontified nil) 233 243 (font-lock-multiline t face font-lock-string-face fontified nil) 243 246 (font-lock-multiline t fontified nil) 246 254 (face font-lock-function-name-face font-lock-multiline t fontified nil) 254 256 (font-lock-multiline t fontified nil) 256 257 (font-lock-multiline t rear-nonsticky nil fontified nil)) . 2011) (undo-tree-id1006 . -55) (nil rear-nonsticky t 2267 . 2268)) (26455 34573 587555 0) 0 (:visualizer [0 1 0 #<marker at 4693 in  *undo-tree*>])])
([nil nil ((#(")" 0 1 (font-lock-multiline t fontified t)) . -2123) (undo-tree-id619 . -1) (undo-tree-id621 . -1) (undo-tree-id623 . -1) (undo-tree-id625 . -1) 2124) ((2123 . 2124)) (26455 30868 231129 0) 0 (:visualizer [0 1 0 #<marker at 4701 in  *undo-tree*>])] [nil nil ((2292 . 2294)) ((#("xu" 0 2 (face font-lock-variable-name-face font-lock-multiline t fontified t)) . 2292)) (26455 30240 169476 0) 0 (:visualizer [0 1 0 #<marker at 4705 in  *undo-tree*>])] [nil nil ((#("export async function createProduct(formData: FormData): Promise<void> {
    const info = format.safeParse({
        name: formData.get('name'),
        price: parseFloat(formData.get(\"price\") as string),
        imageLocation: formData.get('imageLocation'),
        category: formData.get('category'),
    });
    try {
        await db.insert(productCatalouge).values({
            name: info.name,
            imageLocation: info.imageLocation ,
            price: info.price,
            category: info.category ,
        });
        await stripe.products.create({
            name: info.name,
        });
        await stripe.prices.create({
            currency: 'gpp',
           unit_amount: Math.round(info.price * 100),
            product_data: {
                name: info.name,
            },
        });
        console.log('Product created successfully!');
    } catch (error) {
        console.error('Error creating product:', error);
    }
}


" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 35 (face font-lock-function-name-face fontified t) 35 36 (fontified t) 36 44 (face font-lock-variable-name-face fontified t) 44 46 (fontified t) 46 54 (face font-lock-type-face fontified t) 54 57 (fontified t) 57 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 69 (face typescript-primitive-face fontified t) 69 70 (fontified t) 70 71 (fontified t) 71 72 (font-lock-multiline t fontified t) 72 73 (font-lock-multiline t fontified t) 73 77 (font-lock-multiline t fontified t) 77 82 (font-lock-multiline t face font-lock-keyword-face fontified t) 82 83 (font-lock-multiline t fontified t) 83 87 (face font-lock-variable-name-face font-lock-multiline t fontified t) 87 97 (font-lock-multiline t fontified t) 97 102 (face font-lock-function-name-face font-lock-multiline t fontified t) 102 106 (face font-lock-function-name-face font-lock-multiline t fontified t) 106 132 (font-lock-multiline t fontified t) 132 135 (font-lock-multiline t face font-lock-function-name-face fontified t) 135 136 (font-lock-multiline t fontified t) 136 142 (font-lock-multiline t face font-lock-string-face fontified t) 142 153 (font-lock-multiline t fontified t) 153 160 (font-lock-multiline t fontified t) 160 170 (face font-lock-function-name-face font-lock-multiline t fontified t) 170 180 (font-lock-multiline t fontified t) 180 183 (font-lock-multiline t face font-lock-function-name-face fontified t) 183 184 (font-lock-multiline t fontified t) 184 191 (font-lock-multiline t face font-lock-string-face fontified t) 191 193 (font-lock-multiline t fontified t) 193 195 (font-lock-multiline t face font-lock-keyword-face fontified t) 195 196 (font-lock-multiline t fontified t) 196 202 (font-lock-multiline t face typescript-primitive-face fontified t) 202 203 (font-lock-multiline t fontified t) 203 204 (font-lock-multiline t rear-nonsticky t fontified t) 204 237 (font-lock-multiline t fontified t) 237 240 (font-lock-multiline t face font-lock-function-name-face fontified t) 240 241 (font-lock-multiline t fontified t) 241 256 (font-lock-multiline t face font-lock-string-face fontified t) 256 286 (font-lock-multiline t fontified t) 286 289 (font-lock-multiline t face font-lock-function-name-face fontified t) 289 290 (font-lock-multiline t fontified t) 290 300 (font-lock-multiline t face font-lock-string-face fontified t) 300 315 (font-lock-multiline t fontified t) 315 318 (font-lock-multiline t face font-lock-keyword-face fontified t) 318 329 (font-lock-multiline t fontified t) 329 334 (font-lock-multiline t face font-lock-keyword-face fontified t) 334 338 (font-lock-multiline t fontified t) 338 344 (face font-lock-function-name-face font-lock-multiline t fontified t) 344 363 (font-lock-multiline t fontified t) 363 369 (face font-lock-function-name-face font-lock-multiline t fontified t) 369 371 (font-lock-multiline t fontified t) 371 400 (font-lock-multiline t fontified t) 400 447 (font-lock-multiline t fontified t) 447 478 (font-lock-multiline t fontified t) 478 516 (font-lock-multiline t fontified t) 516 538 (font-lock-multiline t fontified t) 538 543 (font-lock-multiline t face font-lock-keyword-face fontified t) 543 560 (font-lock-multiline t fontified t) 560 566 (face font-lock-function-name-face font-lock-multiline t fontified t) 566 596 (font-lock-multiline t fontified t) 596 618 (font-lock-multiline t fontified t) 618 623 (font-lock-multiline t face font-lock-keyword-face fontified t) 623 638 (font-lock-multiline t fontified t) 638 644 (face font-lock-function-name-face font-lock-multiline t fontified t) 644 669 (font-lock-multiline t fontified t) 669 674 (font-lock-multiline t face font-lock-string-face fontified t) 674 687 (font-lock-multiline t fontified t) 687 700 (font-lock-multiline t fontified t) 700 704 (font-lock-multiline t face font-lock-type-face fontified t) 704 705 (font-lock-multiline t fontified t) 705 710 (face font-lock-function-name-face font-lock-multiline t fontified t) 710 727 (font-lock-multiline t fontified t) 727 728 (font-lock-multiline t rear-nonsticky t fontified t) 728 789 (font-lock-multiline t fontified t) 789 826 (font-lock-multiline t fontified t) 826 833 (face font-lock-type-face font-lock-multiline t fontified t) 833 834 (font-lock-multiline t fontified t) 834 837 (face font-lock-function-name-face font-lock-multiline t fontified t) 837 838 (font-lock-multiline t fontified t) 838 869 (font-lock-multiline t face font-lock-string-face fontified t) 869 878 (font-lock-multiline t fontified t) 878 883 (font-lock-multiline t face font-lock-keyword-face fontified t) 883 902 (font-lock-multiline t fontified t) 902 909 (face font-lock-type-face font-lock-multiline t fontified t) 909 910 (font-lock-multiline t fontified t) 910 915 (face font-lock-function-name-face font-lock-multiline t fontified t) 915 916 (font-lock-multiline t fontified t) 916 941 (font-lock-multiline t face font-lock-string-face fontified t) 941 957 (font-lock-multiline t fontified t) 957 958 (font-lock-multiline t fontified t) 958 959 (fontified t) 959 961 (fontified t)) . 1921) (undo-tree-id348 . -102) (undo-tree-id349 . -961) (undo-tree-id350 . -371) (undo-tree-id352 . -371) (undo-tree-id354 . -449) (undo-tree-id356 . -371)) ((1921 . 2882)) (26455 30724 421815 0) 0 (:visualizer [0 1 0 #<marker at 4709 in  *undo-tree*>])])
([nil nil ((#("export async function createProduct(formData: FormData) {
    const info = format.parse({
        const name = formData.get(\"name\")?.toString();
        const price = parseFloat(formData.get(\"price\") as string);
        const imageLocation = formData.get(\"imageLocation\")?.toString();
        const category = formData.get(\"category\")?.toString();
    });
    try {
        await db.insert(productCatalouge).values({
            name: info.name,
            imageLocation: info.imageLocation ,
            price: info.price,
            category: info.category ,
        });
        await stripe.products.create({
            name: info.name,
        });
        await stripe.prices.create({
            currency: 'gpp',
            unit_amount: Math.round(info.price * 100),
            product_data: {
                name: info.name,
            },
        });
        console.log('Product created successfully!');
    } catch (error) {
        console.error('Error creating product:', error);
    }
}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 35 (face font-lock-function-name-face fontified t) 35 36 (fontified t) 36 44 (face font-lock-variable-name-face fontified t) 44 46 (fontified t) 46 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (typescript--pstate ((nil 0 function 1934 ("createProduct") nil) (((nil 0 function 1484 ("setRole") 1919) (nil 0 function 968 ("updateOrderStatus") 1469) (nil 0 function 761 ("orderStatus") 953) (nil 0 function 561 ("authManage") 744)) -2305843009213693952 toplevel nil nil nil)) fontified t) 57 58 (fontified t) 58 62 (fontified t) 62 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 72 (face font-lock-variable-name-face fontified t) 72 82 (fontified t) 82 83 (face font-lock-function-name-face fontified t) 83 87 (face font-lock-function-name-face fontified t) 87 88 (fontified t) 88 90 (font-lock-multiline t fontified t) 90 98 (font-lock-multiline t fontified t) 98 103 (font-lock-multiline t face font-lock-keyword-face fontified t) 103 104 (font-lock-multiline t fontified t) 104 108 (face font-lock-variable-name-face font-lock-multiline t fontified t) 108 120 (font-lock-multiline t fontified t) 120 123 (font-lock-multiline t face font-lock-function-name-face fontified t) 123 124 (font-lock-multiline t fontified t) 124 130 (font-lock-multiline t face font-lock-string-face fontified t) 130 133 (font-lock-multiline t fontified t) 133 141 (face font-lock-function-name-face font-lock-multiline t fontified t) 141 153 (font-lock-multiline t fontified t) 153 158 (font-lock-multiline t face font-lock-keyword-face fontified t) 158 159 (font-lock-multiline t fontified t) 159 164 (face font-lock-variable-name-face font-lock-multiline t fontified t) 164 167 (font-lock-multiline t fontified t) 167 177 (face font-lock-function-name-face font-lock-multiline t fontified t) 177 187 (font-lock-multiline t fontified t) 187 190 (font-lock-multiline t face font-lock-function-name-face fontified t) 190 191 (font-lock-multiline t fontified t) 191 198 (font-lock-multiline t face font-lock-string-face fontified t) 198 200 (font-lock-multiline t fontified t) 200 202 (font-lock-multiline t face font-lock-keyword-face fontified t) 202 203 (font-lock-multiline t fontified t) 203 209 (font-lock-multiline t face typescript-primitive-face fontified t) 209 220 (font-lock-multiline t fontified t) 220 225 (font-lock-multiline t face font-lock-keyword-face fontified t) 225 226 (font-lock-multiline t fontified t) 226 239 (face font-lock-variable-name-face font-lock-multiline t fontified t) 239 251 (font-lock-multiline t fontified t) 251 254 (font-lock-multiline t face font-lock-function-name-face fontified t) 254 255 (font-lock-multiline t fontified t) 255 270 (font-lock-multiline t face font-lock-string-face fontified t) 270 273 (font-lock-multiline t fontified t) 273 281 (face font-lock-function-name-face font-lock-multiline t fontified t) 281 293 (font-lock-multiline t fontified t) 293 298 (font-lock-multiline t face font-lock-keyword-face fontified t) 298 299 (font-lock-multiline t fontified t) 299 307 (face font-lock-variable-name-face font-lock-multiline t fontified t) 307 319 (font-lock-multiline t fontified t) 319 322 (font-lock-multiline t face font-lock-function-name-face fontified t) 322 323 (font-lock-multiline t fontified t) 323 333 (font-lock-multiline t face font-lock-string-face fontified t) 333 336 (font-lock-multiline t fontified t) 336 344 (face font-lock-function-name-face font-lock-multiline t fontified t) 344 346 (font-lock-multiline t fontified t) 346 347 (font-lock-multiline t rear-nonsticky t fontified t) 347 353 (font-lock-multiline t fontified t) 353 354 (fontified t) 354 356 (fontified t) 356 360 (fontified t) 360 363 (face font-lock-keyword-face fontified t) 363 364 (fontified t) 364 374 (font-lock-multiline t fontified t) 374 379 (font-lock-multiline t face font-lock-keyword-face fontified t) 379 383 (font-lock-multiline t fontified t) 383 389 (face font-lock-function-name-face font-lock-multiline t fontified t) 389 408 (font-lock-multiline t fontified t) 408 414 (face font-lock-function-name-face font-lock-multiline t fontified t) 414 416 (font-lock-multiline t fontified t) 416 445 (font-lock-multiline t fontified t) 445 492 (font-lock-multiline t fontified t) 492 523 (font-lock-multiline t fontified t) 523 561 (font-lock-multiline t fontified t) 561 583 (font-lock-multiline t fontified t) 583 588 (font-lock-multiline t face font-lock-keyword-face fontified t) 588 605 (font-lock-multiline t fontified t) 605 611 (face font-lock-function-name-face font-lock-multiline t fontified t) 611 641 (font-lock-multiline t fontified t) 641 663 (font-lock-multiline t fontified t) 663 668 (font-lock-multiline t face font-lock-keyword-face fontified t) 668 683 (font-lock-multiline t fontified t) 683 689 (face font-lock-function-name-face font-lock-multiline t fontified t) 689 714 (font-lock-multiline t fontified t) 714 719 (font-lock-multiline t face font-lock-string-face fontified t) 719 733 (font-lock-multiline t fontified t) 733 746 (font-lock-multiline t fontified t) 746 750 (font-lock-multiline t face font-lock-type-face fontified t) 750 751 (font-lock-multiline t fontified t) 751 756 (face font-lock-function-name-face font-lock-multiline t fontified t) 756 773 (font-lock-multiline t fontified t) 773 774 (font-lock-multiline t fontified t rear-nonsticky t) 774 835 (font-lock-multiline t fontified t) 835 872 (font-lock-multiline t fontified t) 872 879 (face font-lock-type-face font-lock-multiline t fontified t) 879 880 (font-lock-multiline t fontified t) 880 883 (face font-lock-function-name-face font-lock-multiline t fontified t) 883 884 (font-lock-multiline t fontified t) 884 915 (font-lock-multiline t face font-lock-string-face fontified t) 915 923 (font-lock-multiline t fontified t) 923 924 (fontified t) 924 929 (face font-lock-keyword-face fontified t) 929 938 (fontified t) 938 948 (font-lock-multiline t fontified t) 948 955 (face font-lock-type-face font-lock-multiline t fontified t) 955 956 (font-lock-multiline t fontified t) 956 961 (face font-lock-function-name-face font-lock-multiline t fontified t) 961 962 (font-lock-multiline t fontified t) 962 987 (font-lock-multiline t face font-lock-string-face fontified t) 987 1002 (font-lock-multiline t fontified t) 1002 1003 (fontified t) 1003 1004 (typescript--pend (nil 0 function 1934 ("createProduct") nil) fontified t)) . 1921) (undo-tree-id991 . -90) (undo-tree-id992 . -145) (undo-tree-id993 . -90) (undo-tree-id994 . -1004) (undo-tree-id996 . -574) (undo-tree-id998 . -355) (undo-tree-id1000 . -355) (undo-tree-id1001 . -355) (undo-tree-id1002 . -348) (undo-tree-id1004 . -355) (undo-tree-id1005 . -90)) ((1921 . 2925)) (26455 34572 985064 0) 0 (:visualizer [0 1 0 #<marker at 4846 in  *undo-tree*>])])
([nil nil ((#("p" 0 1 (font-lock-multiline t fontified t)) . -2081) (undo-tree-id410 . -1) (undo-tree-id412 . -1) (undo-tree-id414 . -1) (undo-tree-id416 . -1) (undo-tree-id418 . -1) (undo-tree-id420 . -1) (undo-tree-id422 . -1) (undo-tree-id424 . -1) (undo-tree-id426 . -1) (undo-tree-id428 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2082) (undo-tree-id430 . -1) (undo-tree-id432 . -1) (undo-tree-id434 . -1) (undo-tree-id436 . -1) (undo-tree-id438 . -1) (undo-tree-id440 . -1) (undo-tree-id442 . -1) (undo-tree-id444 . -1) (undo-tree-id446 . -1) (undo-tree-id448 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -2083) (undo-tree-id450 . -1) (undo-tree-id452 . -1) (undo-tree-id454 . -1) (undo-tree-id456 . -1) (undo-tree-id458 . -1) (undo-tree-id460 . -1) (undo-tree-id462 . -1) (undo-tree-id464 . -1) (undo-tree-id466 . -1) (undo-tree-id468 . -1) (#("s" 0 1 (font-lock-multiline t fontified t)) . -2084) (undo-tree-id470 . -1) (undo-tree-id472 . -1) (undo-tree-id474 . -1) (undo-tree-id476 . -1) (undo-tree-id478 . -1) (undo-tree-id480 . -1) (undo-tree-id482 . -1) (undo-tree-id484 . -1) (undo-tree-id486 . -1) (undo-tree-id488 . -1) (#("e" 0 1 (font-lock-multiline t fontified t)) . -2085) (undo-tree-id490 . -1) (undo-tree-id492 . -1) (undo-tree-id494 . -1) (undo-tree-id496 . -1) (undo-tree-id498 . -1) (undo-tree-id500 . -1) (undo-tree-id502 . -1) (undo-tree-id504 . -1) (undo-tree-id506 . -1) (undo-tree-id508 . -1) (#("F" 0 1 (font-lock-multiline t fontified t)) . -2086) (undo-tree-id510 . -1) (undo-tree-id512 . -1) (undo-tree-id514 . -1) (undo-tree-id516 . -1) (undo-tree-id518 . -1) (undo-tree-id520 . -1) (undo-tree-id522 . -1) (undo-tree-id524 . -1) (undo-tree-id526 . -1) (undo-tree-id528 . -1) (#("l" 0 1 (font-lock-multiline t fontified t)) . -2087) (undo-tree-id530 . -1) (undo-tree-id532 . -1) (undo-tree-id534 . -1) (undo-tree-id536 . -1) (undo-tree-id538 . -1) (undo-tree-id540 . -1) (undo-tree-id542 . -1) (undo-tree-id544 . -1) (undo-tree-id546 . -1) (undo-tree-id548 . -1) (#("o" 0 1 (font-lock-multiline t fontified t)) . -2088) (undo-tree-id550 . -1) (undo-tree-id552 . -1) (undo-tree-id554 . -1) (undo-tree-id556 . -1) (undo-tree-id558 . -1) (undo-tree-id560 . -1) (undo-tree-id562 . -1) (undo-tree-id564 . -1) (undo-tree-id566 . -1) (undo-tree-id568 . -1) (#("a" 0 1 (font-lock-multiline t fontified t)) . -2089) (undo-tree-id570 . -1) (undo-tree-id572 . -1) (undo-tree-id574 . -1) (undo-tree-id576 . -1) (undo-tree-id578 . -1) (undo-tree-id580 . -1) (undo-tree-id582 . -1) (undo-tree-id584 . -1) (undo-tree-id586 . -1) (undo-tree-id588 . -1) (#("t" 0 1 (font-lock-multiline t fontified t)) . -2090) (undo-tree-id590 . -1) (undo-tree-id592 . -1) (undo-tree-id594 . -1) (undo-tree-id596 . -1) (undo-tree-id598 . -1) (undo-tree-id600 . -1) (undo-tree-id602 . -1) (undo-tree-id604 . -1) (undo-tree-id606 . -1) (undo-tree-id608 . -1) (#("(" 0 1 (font-lock-multiline t fontified t)) . -2091) (undo-tree-id610 . -1) (undo-tree-id612 . -1) (undo-tree-id614 . -1) (undo-tree-id616 . -1) (undo-tree-id618 . -1) 2092) ((2081 . 2092) (t 26455 30749 664840 46000)) (26455 30749 660446 0) 0 (:visualizer [0 1 0 #<marker at 4854 in  *undo-tree*>])])
nil
([nil nil ((nil rear-nonsticky nil 3163 . 3164) (1921 . 3164)) ((#("export async function createProduct(formData: FormData) {
  // Parse the form data using the existing format schema
  const result = format.safeParse({
    name: formData.get('name'),
    price: Number(formData.get('price')),
    imageLocation: formData.get('imageLocation'),
    category: formData.get('category'),
  });

  // Handle validation errors
  if (!result.success) {
    return { 
      errors: result.error.flatten().fieldErrors 
    };
  }

  const { name, price, imageLocation, category } = result.data;

  try {
    // Insert into database
    await db.insert(productCatalogue).values({
      name,
      imageLocation,
      price,
      category,
    });

    // Create Stripe product
    const stripeProduct = await stripe.products.create({ name });

    // Create Stripe price
    await stripe.prices.create({
      currency: 'usd',
      unit_amount: Math.round(price * 100), // Convert to cents
      product: stripeProduct.id,
    });

    console.log('Product created successfully!');
    return { success: true };
  } catch (error) {
    console.error('Error creating product:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'An unknown error occurred' 
    };
  }
}" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 21 (face font-lock-keyword-face fontified nil) 21 22 (fontified nil) 22 35 (face font-lock-function-name-face fontified nil) 35 36 (fontified nil) 36 44 (face font-lock-variable-name-face fontified nil) 44 46 (fontified nil) 46 54 (face font-lock-type-face fontified nil) 54 56 (fontified nil) 56 57 (font-lock-multiline t typescript--pstate ((nil 0 function 1934 ("createProduct") 3164) (((nil 0 function 1484 ("setRole") 1919) (nil 0 function 968 ("updateOrderStatus") 1469) (nil 0 function 761 ("orderStatus") 953) (nil 0 function 561 ("authManage") 744)) -2305843009213693952 toplevel nil nil nil)) fontified nil) 57 60 (font-lock-multiline t fontified nil) 60 63 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 63 116 (font-lock-multiline t face font-lock-comment-face fontified nil) 116 118 (font-lock-multiline t fontified nil) 118 123 (font-lock-multiline t face font-lock-keyword-face fontified nil) 123 124 (font-lock-multiline t fontified nil) 124 130 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 130 140 (font-lock-multiline t fontified nil) 140 149 (face font-lock-function-name-face font-lock-multiline t fontified nil) 149 152 (font-lock-multiline t fontified nil) 152 171 (font-lock-multiline t fontified nil) 171 174 (font-lock-multiline t face font-lock-function-name-face fontified nil) 174 175 (font-lock-multiline t fontified nil) 175 181 (font-lock-multiline t face font-lock-string-face fontified nil) 181 182 (font-lock-multiline t fontified nil) 182 195 (font-lock-multiline t fontified nil) 195 201 (font-lock-multiline t face font-lock-type-face fontified nil) 201 211 (font-lock-multiline t fontified nil) 211 214 (font-lock-multiline t face font-lock-function-name-face fontified nil) 214 215 (font-lock-multiline t fontified nil) 215 222 (font-lock-multiline t face font-lock-string-face fontified nil) 222 254 (font-lock-multiline t fontified nil) 254 257 (font-lock-multiline t face font-lock-function-name-face fontified nil) 257 258 (font-lock-multiline t fontified nil) 258 273 (font-lock-multiline t face font-lock-string-face fontified nil) 273 299 (font-lock-multiline t fontified nil) 299 302 (font-lock-multiline t face font-lock-function-name-face fontified nil) 302 303 (font-lock-multiline t fontified nil) 303 313 (font-lock-multiline t face font-lock-string-face fontified nil) 313 325 (font-lock-multiline t fontified nil) 325 327 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 327 328 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 328 353 (font-lock-multiline t face font-lock-comment-face fontified nil) 353 355 (font-lock-multiline t fontified nil) 355 357 (font-lock-multiline t face font-lock-keyword-face fontified nil) 357 382 (font-lock-multiline t fontified nil) 382 388 (font-lock-multiline t face font-lock-keyword-face fontified nil) 388 419 (font-lock-multiline t fontified nil) 419 426 (face font-lock-function-name-face font-lock-multiline t fontified nil) 426 429 (font-lock-multiline t fontified nil) 429 440 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 440 453 (font-lock-multiline t fontified nil) 453 456 (font-lock-multiline t fontified nil) 456 461 (font-lock-multiline t face font-lock-keyword-face fontified nil) 461 518 (font-lock-multiline t fontified nil) 518 519 (font-lock-multiline t fontified nil) 519 521 (font-lock-multiline t fontified nil) 521 524 (font-lock-multiline t face font-lock-keyword-face fontified nil) 524 531 (font-lock-multiline t fontified nil) 531 533 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 533 534 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 534 555 (font-lock-multiline t face font-lock-comment-face fontified nil) 555 559 (font-lock-multiline t fontified nil) 559 564 (font-lock-multiline t face font-lock-keyword-face fontified nil) 564 568 (font-lock-multiline t fontified nil) 568 574 (face font-lock-function-name-face font-lock-multiline t fontified nil) 574 588 (font-lock-multiline t fontified nil) 588 589 (font-lock-multiline t fontified nil) 589 590 (font-lock-multiline t fontified nil) 590 593 (font-lock-multiline t fontified nil) 593 599 (face font-lock-function-name-face font-lock-multiline t fontified nil) 599 677 (font-lock-multiline t fontified nil) 677 680 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 680 702 (font-lock-multiline t face font-lock-comment-face fontified nil) 702 706 (font-lock-multiline t fontified nil) 706 711 (font-lock-multiline t face font-lock-keyword-face fontified nil) 711 712 (font-lock-multiline t fontified nil) 712 725 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 725 728 (font-lock-multiline t fontified nil) 728 733 (font-lock-multiline t face font-lock-keyword-face fontified nil) 733 750 (font-lock-multiline t fontified nil) 750 756 (face font-lock-function-name-face font-lock-multiline t fontified nil) 756 768 (font-lock-multiline t fontified nil) 768 773 (font-lock-multiline t fontified nil) 773 776 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 776 796 (font-lock-multiline t face font-lock-comment-face fontified nil) 796 800 (font-lock-multiline t fontified nil) 800 805 (font-lock-multiline t face font-lock-keyword-face fontified nil) 805 820 (font-lock-multiline t fontified nil) 820 826 (face font-lock-function-name-face font-lock-multiline t fontified nil) 826 845 (font-lock-multiline t fontified nil) 845 850 (font-lock-multiline t face font-lock-string-face fontified nil) 850 871 (font-lock-multiline t fontified nil) 871 875 (font-lock-multiline t face font-lock-type-face fontified nil) 875 876 (font-lock-multiline t fontified nil) 876 881 (face font-lock-function-name-face font-lock-multiline t fontified nil) 881 896 (font-lock-multiline t fontified nil) 896 899 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 899 916 (font-lock-multiline t face font-lock-comment-face fontified nil) 916 962 (font-lock-multiline t fontified nil) 962 969 (face font-lock-type-face font-lock-multiline t fontified nil) 969 970 (font-lock-multiline t fontified nil) 970 973 (face font-lock-function-name-face font-lock-multiline t fontified nil) 973 974 (font-lock-multiline t fontified nil) 974 1005 (font-lock-multiline t face font-lock-string-face fontified nil) 1005 1012 (font-lock-multiline t fontified nil) 1012 1018 (font-lock-multiline t face font-lock-keyword-face fontified nil) 1018 1030 (font-lock-multiline t fontified nil) 1030 1034 (font-lock-multiline t face font-lock-constant-face fontified nil) 1034 1042 (font-lock-multiline t fontified nil) 1042 1047 (font-lock-multiline t face font-lock-keyword-face fontified nil) 1047 1049 (font-lock-multiline t fontified nil) 1049 1050 (font-lock-multiline t fontified nil) 1050 1062 (font-lock-multiline t fontified nil) 1062 1069 (face font-lock-type-face font-lock-multiline t fontified nil) 1069 1070 (font-lock-multiline t fontified nil) 1070 1075 (face font-lock-function-name-face font-lock-multiline t fontified nil) 1075 1076 (font-lock-multiline t fontified nil) 1076 1101 (font-lock-multiline t face font-lock-string-face fontified nil) 1101 1115 (font-lock-multiline t fontified nil) 1115 1121 (font-lock-multiline t face font-lock-keyword-face fontified nil) 1121 1140 (font-lock-multiline t fontified nil) 1140 1145 (font-lock-multiline t face font-lock-constant-face fontified nil) 1145 1167 (font-lock-multiline t fontified nil) 1167 1177 (font-lock-multiline t face font-lock-keyword-face fontified nil) 1177 1178 (font-lock-multiline t fontified nil) 1178 1183 (face font-lock-type-face font-lock-multiline t fontified nil) 1183 1202 (font-lock-multiline t fontified nil) 1202 1229 (font-lock-multiline t face font-lock-string-face fontified nil) 1229 1242 (font-lock-multiline t fontified nil) 1242 1243 (typescript--pend (nil 0 function 1934 ("createProduct") 3164) font-lock-multiline t fontified nil rear-nonsticky nil)) . 1921) (undo-tree-id391 . -182) (undo-tree-id392 . -579) (undo-tree-id393 . -663) (undo-tree-id394 . -56) (undo-tree-id395 . -1241) (undo-tree-id396 . -1242) (undo-tree-id397 . -956) (undo-tree-id398 . -56) (undo-tree-id399 . -1243) (undo-tree-id400 . -589) (undo-tree-id401 . -519) (undo-tree-id402 . -526) (undo-tree-id403 . -526) (undo-tree-id404 . -519) (undo-tree-id405 . -589) (undo-tree-id406 . -768) (undo-tree-id407 . -519) (nil rear-nonsticky t 3163 . 3164)) (26455 30724 163769 0) 0 (:visualizer [0 1 0 #<marker at 4862 in  *undo-tree*>])])
([nil nil ((nil rear-nonsticky nil 3012 . 3013) (nil fontified nil 1921 . 3013) (1921 . 3013)) ((#("export async function createProduct(formData: FormData): Promise<void> {
    try {
        const name = formData.get(\"name\")?.toString();
        const price = parseFloat(formData.get(\"price\") as string);
        const imageLocation = formData.get(\"imageLocation\")?.toString();
        const category = formData.get(\"category\")?.toString();

        // Quick validation
        if (!name || isNaN(price) || !imageLocation || !category) {
            throw new Error(\"Invalid form data\");
        }

        // Insert data into the database
        await db.insert(productCatalouge).values({
            name,
            imageLocation,
            price,
            category,
        });

        // Create product in Stripe
        const product = await stripe.products.create({ name });
        await stripe.prices.create({
            currency: \"gbp\",
            unit_amount: Math.round(price * 100),
            product: product.id,
        });

        console.log(\"Product created successfully!\");
    } catch (error) {
        console.error(\"Error creating product:\", error);
    }
}" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 21 (face font-lock-keyword-face fontified nil) 21 22 (fontified nil) 22 35 (face font-lock-function-name-face fontified nil) 35 36 (fontified nil) 36 44 (face font-lock-variable-name-face fontified nil) 44 46 (fontified nil) 46 54 (face font-lock-type-face fontified nil) 54 57 (fontified nil) 57 64 (face font-lock-type-face fontified nil) 64 65 (fontified nil) 65 69 (face typescript-primitive-face fontified nil) 69 71 (fontified nil) 71 77 (font-lock-multiline t fontified nil) 77 80 (font-lock-multiline t face font-lock-keyword-face fontified nil) 80 91 (font-lock-multiline t fontified nil) 91 96 (font-lock-multiline t face font-lock-keyword-face fontified nil) 96 97 (font-lock-multiline t fontified nil) 97 101 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 101 113 (font-lock-multiline t fontified nil) 113 116 (font-lock-multiline t face font-lock-function-name-face fontified nil) 116 117 (font-lock-multiline t fontified nil) 117 123 (font-lock-multiline t face font-lock-string-face fontified nil) 123 126 (font-lock-multiline t fontified nil) 126 134 (face font-lock-function-name-face font-lock-multiline t fontified nil) 134 146 (font-lock-multiline t fontified nil) 146 151 (font-lock-multiline t face font-lock-keyword-face fontified nil) 151 152 (font-lock-multiline t fontified nil) 152 157 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 157 160 (font-lock-multiline t fontified nil) 160 170 (face font-lock-function-name-face font-lock-multiline t fontified nil) 170 180 (font-lock-multiline t fontified nil) 180 183 (font-lock-multiline t face font-lock-function-name-face fontified nil) 183 184 (font-lock-multiline t fontified nil) 184 191 (font-lock-multiline t face font-lock-string-face fontified nil) 191 193 (font-lock-multiline t fontified nil) 193 195 (font-lock-multiline t face font-lock-keyword-face fontified nil) 195 196 (font-lock-multiline t fontified nil) 196 202 (font-lock-multiline t face typescript-primitive-face fontified nil) 202 213 (font-lock-multiline t fontified nil) 213 218 (font-lock-multiline t face font-lock-keyword-face fontified nil) 218 219 (font-lock-multiline t fontified nil) 219 232 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 232 244 (font-lock-multiline t fontified nil) 244 247 (font-lock-multiline t face font-lock-function-name-face fontified nil) 247 248 (font-lock-multiline t fontified nil) 248 263 (font-lock-multiline t face font-lock-string-face fontified nil) 263 266 (font-lock-multiline t fontified nil) 266 274 (face font-lock-function-name-face font-lock-multiline t fontified nil) 274 286 (font-lock-multiline t fontified nil) 286 291 (font-lock-multiline t face font-lock-keyword-face fontified nil) 291 292 (font-lock-multiline t fontified nil) 292 300 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 300 312 (font-lock-multiline t fontified nil) 312 315 (font-lock-multiline t face font-lock-function-name-face fontified nil) 315 316 (font-lock-multiline t fontified nil) 316 326 (font-lock-multiline t face font-lock-string-face fontified nil) 326 329 (font-lock-multiline t fontified nil) 329 337 (face font-lock-function-name-face font-lock-multiline t fontified nil) 337 350 (font-lock-multiline t fontified nil) 350 353 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 353 370 (font-lock-multiline t face font-lock-comment-face fontified nil) 370 378 (font-lock-multiline t fontified nil) 378 380 (font-lock-multiline t face font-lock-keyword-face fontified nil) 380 391 (font-lock-multiline t fontified nil) 391 396 (face font-lock-function-name-face font-lock-multiline t fontified nil) 396 450 (font-lock-multiline t fontified nil) 450 455 (font-lock-multiline t face font-lock-keyword-face fontified nil) 455 456 (font-lock-multiline t fontified nil) 456 459 (font-lock-multiline t face font-lock-keyword-face fontified nil) 459 460 (font-lock-multiline t fontified nil) 460 465 (face font-lock-type-face font-lock-multiline t fontified nil) 465 466 (font-lock-multiline t fontified nil) 466 485 (font-lock-multiline t face font-lock-string-face fontified nil) 485 507 (font-lock-multiline t fontified nil) 507 510 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 510 540 (font-lock-multiline t face font-lock-comment-face fontified nil) 540 548 (font-lock-multiline t fontified nil) 548 553 (font-lock-multiline t face font-lock-keyword-face fontified nil) 553 557 (font-lock-multiline t fontified nil) 557 563 (face font-lock-function-name-face font-lock-multiline t fontified nil) 563 582 (font-lock-multiline t fontified nil) 582 588 (face font-lock-function-name-face font-lock-multiline t fontified nil) 588 698 (font-lock-multiline t fontified nil) 698 701 (font-lock-multiline t face font-lock-comment-delimiter-face fontified nil) 701 726 (font-lock-multiline t face font-lock-comment-face fontified nil) 726 734 (font-lock-multiline t fontified nil) 734 739 (font-lock-multiline t face font-lock-keyword-face fontified nil) 739 740 (font-lock-multiline t fontified nil) 740 747 (face font-lock-variable-name-face font-lock-multiline t fontified nil) 747 750 (font-lock-multiline t fontified nil) 750 755 (font-lock-multiline t face font-lock-keyword-face fontified nil) 755 772 (font-lock-multiline t fontified nil) 772 778 (face font-lock-function-name-face font-lock-multiline t fontified nil) 778 798 (font-lock-multiline t fontified nil) 798 803 (font-lock-multiline t face font-lock-keyword-face fontified nil) 803 818 (font-lock-multiline t fontified nil) 818 824 (face font-lock-function-name-face font-lock-multiline t fontified nil) 824 849 (font-lock-multiline t fontified nil) 849 854 (font-lock-multiline t face font-lock-string-face fontified nil) 854 881 (font-lock-multiline t fontified nil) 881 885 (font-lock-multiline t face font-lock-type-face fontified nil) 885 886 (font-lock-multiline t fontified nil) 886 891 (face font-lock-function-name-face font-lock-multiline t fontified nil) 891 960 (font-lock-multiline t fontified nil) 960 967 (face font-lock-type-face font-lock-multiline t fontified nil) 967 968 (font-lock-multiline t fontified nil) 968 971 (face font-lock-function-name-face font-lock-multiline t fontified nil) 971 972 (font-lock-multiline t fontified nil) 972 1003 (font-lock-multiline t face font-lock-string-face fontified nil) 1003 1012 (font-lock-multiline t fontified nil) 1012 1017 (font-lock-multiline t face font-lock-keyword-face fontified nil) 1017 1036 (font-lock-multiline t fontified nil) 1036 1043 (face font-lock-type-face font-lock-multiline t fontified nil) 1043 1044 (font-lock-multiline t fontified nil) 1044 1049 (face font-lock-function-name-face font-lock-multiline t fontified nil) 1049 1050 (font-lock-multiline t fontified nil) 1050 1075 (font-lock-multiline t face font-lock-string-face fontified nil) 1075 1091 (font-lock-multiline t fontified nil) 1091 1092 (font-lock-multiline t rear-nonsticky nil fontified nil)) . 1921) (undo-tree-id971 . -1092) (undo-tree-id972 . -1027) (undo-tree-id973 . -1027) (undo-tree-id974 . -1091) (undo-tree-id975 . -1085) (undo-tree-id976 . -1028) (undo-tree-id977 . -1006) (undo-tree-id978 . -952) (undo-tree-id979 . -951) (undo-tree-id980 . -939) (undo-tree-id981 . -906) (undo-tree-id982 . -856) (undo-tree-id983 . -827) (nil rear-nonsticky t 3012 . 3013) (t 26455 34292 550423 34000)) (26455 34292 545620 0) 0 (:visualizer [0 1 0 #<marker at 4999 in  *undo-tree*>])])
nil
([nil nil ((#("u" 0 1 (font-lock-multiline t fontified t)) . 2510)) ((2510 . 2511)) (26455 30723 84063 0) 0 (:visualizer [0 1 0 #<marker at 5015 in  *undo-tree*>])])
nil
([nil nil ((2509 . 2510)) ((#("u" 0 1 (font-lock-multiline t fontified t)) . 2509)) (26455 30722 370626 0) 0 (:visualizer [0 1 0 #<marker at 5168 in  *undo-tree*>])])
([nil nil ((3164 . 3166) (t 26455 30178 252320 979000)) ((#("

" 0 1 (fontified t)) . 3164)) (26455 30721 714225 0) 0 (:visualizer [0 1 0 #<marker at 5321 in  *undo-tree*>])])
([nil nil ((#("
" 0 1 (fontified t)) . -745) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("
" 0 1 (fontified t)) . -746) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 747 (t 26455 30257 497985 95000)) ((745 . 747)) (26455 30721 181321 0) 0 (:visualizer [0 1 0 #<marker at 5474 in  *undo-tree*>])])
([nil nil ((#("
" 0 1 (fontified t)) . 951) (undo-tree-id389 . -1) (undo-tree-id390 . -1)) ((951 . 952)) (26455 30717 6889 0) 0 (:visualizer [0 1 0 #<marker at 5627 in  *undo-tree*>])])
([nil nil ((#("
" 0 1 (fontified t)) . -1466) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 1467) ((1466 . 1467)) (26455 30714 563232 0) 0 (:visualizer [0 1 0 #<marker at 5780 in  *undo-tree*>])])
([nil nil ((2099 . 2109) (t 26455 30536 383251 918000)) ((#(" as string" 0 1 (font-lock-multiline t fontified t) 1 3 (font-lock-multiline t face font-lock-keyword-face fontified t) 3 4 (font-lock-multiline t fontified t) 4 10 (font-lock-multiline t face typescript-primitive-face fontified t)) . 2099) (undo-tree-id364 . -10) (undo-tree-id365 . -10) (undo-tree-id366 . -10) (undo-tree-id367 . -10) (undo-tree-id368 . -10) (undo-tree-id369 . -10) (undo-tree-id370 . -10) (undo-tree-id371 . -10) (undo-tree-id372 . -10) (undo-tree-id373 . -10) (undo-tree-id374 . -10) (undo-tree-id375 . -10) (undo-tree-id376 . -10) (undo-tree-id377 . -10) (undo-tree-id378 . -10) (undo-tree-id379 . -10) (undo-tree-id380 . -10) (undo-tree-id381 . -10) (undo-tree-id382 . -10) (undo-tree-id383 . -10) (undo-tree-id384 . -10) (undo-tree-id385 . -10) (undo-tree-id386 . -10) (undo-tree-id387 . -10) (undo-tree-id388 . -10) (t 26455 30687 459670 809000)) (26455 30687 456264 0) 0 (:visualizer [0 1 0 #<marker at 5933 in  *undo-tree*>])])
nil
