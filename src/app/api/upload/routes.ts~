import { createPresignedPost } from '@aws-sdk/s3-presigned-post'
import { S3Client } from '@aws-sdk/client-s3'
import { v4 as uuidv4 } from 'uuid'
import { object, string } from 'zod';

// Define schema for environment variables
const envSchema = object({
  AWS_REGION: string(),
  AWS_BUCKET_NAME: string(),
});

export async function POST(request: Request) {
  const { filename, contentType } = await request.json()

  try {
    // Validate process.env against the schema
    const { AWS_REGION, AWS_BUCKET_NAME } = envSchema.parse(process.env);

    const client = new S3Client({ region: AWS_REGION });
    const { url, fields } = await createPresignedPost(client, {
      Bucket: AWS_BUCKET_NAME,
      Key: uuidv4(),
      Conditions: [
        ['content-length-range', 0, 10485760], // up to 10 MB
        ['starts-with', '$Content-Type', contentType],
      ],
      Fields: {
        acl: 'public-read',
        'Content-Type': contentType,
      },
      Expires: 3600, // Seconds before the presigned post expires. 3600 by default.
    })

    return Response.json({ url, fields })
  } catch (error) {
    return Response.json({ error: (error as Error).message })
  }
}
