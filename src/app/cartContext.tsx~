import { createContext, useContext, useReducer, ReactNode } from 'react';

interface Product {
  id: number;
  name: string;
  price: number;
  // Add other product properties as needed
}

interface CartItem {
  product: Product;
  size: string;
  colour: string;
  ribbonId: number | null;
}

interface CartState {
  items: CartItem[];
}

interface CartContextProps {
  children: ReactNode;
}

const CartContext = createContext<{
  state: CartState;
  dispatch: React.Dispatch<{ type: string; payload?: any }>;
} | undefined>(undefined);

const cartReducer = (state: CartState, action: { type: string; payload?: any }): CartState => {
  switch (action.type) {
    case 'ADD_TO_CART':
      return {
        ...state,
        items: [...state.items, action.payload],
      };
    // Add other cases for cart-related actions if needed
    default:
      return state;
  }
};

const CartProvider: React.FC<CartContextProps> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, { items: [] });

  return (
    <CartContext.Provider value={{ state, dispatch }}>
      {children}
    </CartContext.Provider>
  );
};

const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export { CartProvider, useCart };
