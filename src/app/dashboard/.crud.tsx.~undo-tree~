(undo-tree-save-format-version . 1)
"bf24f38e045f660f15856cf3e2c4994c83a7bcc9"
[nil nil nil nil (26732 63251 137957 0) 0 nil]
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -199) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#(":" 0 1 (fontified t)) . -200) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -201) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("{" 0 1 (fontified t)) . -202) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#(" " 0 1 (fontified t)) . -203) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("c" 0 1 (fontified t)) . -204) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("r" 0 1 (fontified t)) . -205) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("u" 0 1 (fontified t)) . -206) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("d" 0 1 (fontified t)) . -207) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#(":" 0 1 (fontified t)) . -208) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#(" " 0 1 (fontified t)) . -209) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("n" 0 1 (fontified t)) . -210) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("u" 0 1 (fontified t)) . -211) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("m" 0 1 (fontified t)) . -212) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("b" 0 1 (fontified t)) . -213) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("e" 0 1 (fontified t)) . -214) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("r" 0 1 (face typescript-primitive-face fontified t)) . -215) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#(" " 0 1 (fontified t)) . -216) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("}" 0 1 (fontified t)) . -217) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -218) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("}" 0 1 (fontified t)) . -219) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 220) nil (26732 63753 600493 0) 0 nil] [nil nil ((#("   const image = await getImage(params.crud);" 0 3 (font-lock-multiline t fontified t) 3 8 (font-lock-multiline t face font-lock-keyword-face fontified t) 8 9 (font-lock-multiline t fontified t) 9 14 (face font-lock-variable-name-face font-lock-multiline t fontified t) 14 17 (font-lock-multiline t fontified t) 17 22 (font-lock-multiline t face font-lock-keyword-face fontified t) 22 23 (font-lock-multiline t fontified t) 23 31 (face font-lock-function-call-face font-lock-multiline t fontified t) 31 45 (font-lock-multiline t fontified t)) . 225) (undo-tree-id28 . -45) (undo-tree-id30 . -45) (undo-tree-id32 . -42) (t 26727 6560 23018 563000)) ((225 . 270)) (26732 63250 827883 0) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -180) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -181) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -182) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -183) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -184) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -185) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -186) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -187) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#(" " 0 1 (fontified t)) . -188) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("}" 0 1 (fontified t)) . -189) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#(":" 0 1 (fontified t)) . -190) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#(" " 0 1 (fontified t)) . -191) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("{" 0 1 (fontified t)) . -192) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -193) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -194) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -195) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -196) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -197) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -198) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 199) nil (26732 63753 600460 0) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-multiline t fontified t)) . -223) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id16 . -1) (undo-tree-id18 . -1) (undo-tree-id20 . -1) (#(" " 0 1 (font-lock-multiline t fontified t)) . -224) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id24 . -1) (undo-tree-id26 . -1) 225) ((223 . 225)) (26732 63250 491703 0) 0 nil])
([nil nil ((180 . 185)) nil (26732 63753 600427 0) 0 nil])
([nil nil ((#("{ params }: { params: { crud: number } }" 0 14 (fontified t) 14 20 (face font-lock-variable-name-face fontified t) 20 30 (fontified t) 30 36 (face typescript-primitive-face fontified t) 36 40 (fontified t)) . 180) (undo-tree-id0 . -40) (undo-tree-id2 . -40) (undo-tree-id4 . -40) (undo-tree-id6 . -40) (undo-tree-id8 . -40) (undo-tree-id10 . -40) (undo-tree-id12 . -40)) ((180 . 220) (t 26732 63204 364320 697000)) (26732 63204 361451 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -180) (undo-tree-id155 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -181) (undo-tree-id156 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -182) (undo-tree-id157 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -183) (undo-tree-id158 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -184) (undo-tree-id159 . -1) 185) nil (26732 63753 600426 0) 0 nil])
nil
([nil nil ((180 . 185)) nil (26732 63753 600421 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -213) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("e" 0 1 (fontified t)) . -214) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -215) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("I" 0 1 (fontified t)) . -216) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("m" 0 1 (fontified t)) . -217) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("a" 0 1 (fontified t)) . -218) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("g" 0 1 (fontified t)) . -219) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("e" 0 1 (fontified t)) . -220) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("(" 0 1 (fontified t)) . -221) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("p" 0 1 (fontified t)) . -222) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("a" 0 1 (fontified t)) . -223) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("r" 0 1 (fontified t)) . -224) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("a" 0 1 (fontified t)) . -225) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("m" 0 1 (fontified t)) . -226) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("s" 0 1 (fontified t)) . -227) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("." 0 1 (fontified t)) . -228) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("c" 0 1 (fontified t)) . -229) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("r" 0 1 (fontified t)) . -230) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("u" 0 1 (fontified t)) . -231) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("d" 0 1 (fontified t)) . -232) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#(")" 0 1 (font-lock-multiline t fontified t)) . -233) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 234) nil (26732 63753 600418 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -207) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("w" 0 1 (fontified t)) . -208) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (fontified t)) . -209) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("i" 0 1 (fontified t)) . -210) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -211) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#(" " 0 1 (fontified t)) . -212) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 213) nil (26732 63753 600383 0) 0 nil])
([nil nil ((207 . 212)) nil (26732 63753 600372 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -191) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#(" " 0 1 (fontified t)) . -192) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("c" 0 1 (fontified t)) . -193) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("o" 0 1 (fontified t)) . -194) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("n" 0 1 (fontified t)) . -195) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("s" 0 1 (fontified t)) . -196) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -197) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#(" " 0 1 (fontified t)) . -198) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -199) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -200) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -201) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -202) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -203) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -204) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("=" 0 1 (fontified t)) . -205) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#(" " 0 1 (fontified t)) . -206) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("p" 0 1 (fontified t)) . -207) (undo-tree-id96 . -1) (#("h" 0 1 (fontified t)) . -208) (undo-tree-id97 . -1) (#("o" 0 1 (fontified t)) . -209) (undo-tree-id98 . -1) (#("t" 0 1 (fontified t)) . -210) (undo-tree-id99 . -1) (#("o" 0 1 (fontified t)) . -211) (undo-tree-id100 . -1) 212) nil (26732 63753 600368 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -189) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#(" " 0 1 (fontified t)) . -190) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 191) nil (26732 63753 600327 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -188) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#(";" 0 1 (fontified t)) . -189) (undo-tree-id43 . -1) 190) nil (26732 63753 600321 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -180) (undo-tree-id34 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -181) (undo-tree-id35 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -182) (undo-tree-id36 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -183) (undo-tree-id37 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -184) (undo-tree-id38 . -1) 185) nil (26732 63753 600315 0) 0 nil])
([nil nil ((180 . 185)) nil (26732 63753 600300 0) 0 nil])
([nil nil ((180 . 181) (185 . 186) (#("{" 0 1 (face font-lock-variable-name-face fontified nil)) . -185) (185 . 186) (t 26732 63753 602815 296000)) nil (26733 3293 372278 0) 0 nil])
([nil nil ((#("." 0 1 (font-lock-multiline t fontified t)) . -1593) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("u" 0 1 (font-lock-multiline t fontified t)) . -1594) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -1595) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("l" 0 1 (font-lock-multiline t fontified t)) . -1596) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 1597 (t 26733 3293 376755 715000)) nil (26733 3331 433580 0) 0 nil])
([nil current ((#("." 0 1 (font-lock-multiline t fontified t)) . -1696) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("u" 0 1 (font-lock-multiline t fontified t)) . -1697) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("r" 0 1 (font-lock-multiline t fontified t)) . -1698) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("l" 0 1 (font-lock-multiline t fontified t)) . -1699) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 1700) nil (26733 3331 433570 0) 0 nil])
nil
